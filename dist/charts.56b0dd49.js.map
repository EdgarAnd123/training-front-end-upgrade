{"version":3,"sources":["../api/api.js","charts.js"],"names":["api","url","fetch","response","json","data","template","document","createElement","innerHTML","Chart","attachShadow","mode","shadowRoot","appendChild","content","cloneNode","title","getAttribute","apiSource","chartType","drawChart","bind","chartResizer","window","addEventListener","dataTable","google","visualization","DataTable","tableOptions","chartsMap","BarChart","querySelector","PieChart","addColumn","postsList","posts","Map","map","post","values","postsOccurrencesMap","counterPostsOccurrences","forEach","addRow","userId","toString","postOccurrences","chart","draw","console","log","charts","load","setOnLoadCallback","postsArray","key","postsOccurrences","postOccurrence","find","item","occurrence","newPostOcurrence","options","HTMLElement","customElements","define"],"mappings":";;ACAA;;;;;;;;;SDA8BA;;;;;iEAAf,iBAAmBC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACRA,GADQ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEgBC,KAAK,CAACD,GAAD,CAFrB;;AAAA;AAEDE,YAAAA,QAFC;AAAA;AAAA,mBAGYA,QAAQ,CAACC,IAAT,EAHZ;;AAAA;AAGDC,YAAAA,IAHC;AAAA,6CAKAA,IALA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;ACEf,IAAMC,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAjB;AACAF,QAAQ,CAACG,SAAT;;IASMC;;;;;AACF,mBAAc;AAAA;;AAAA;;AACV;;AAEA,UAAKC,YAAL,CAAkB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAlB;;AACA,UAAKC,UAAL,CAAgBC,WAAhB,CAA4BR,QAAQ,CAACS,OAAT,CAAiBC,SAAjB,CAA2B,IAA3B,CAA5B;;AAEA,UAAKC,KAAL,GAAa,MAAKC,YAAL,CAAkB,OAAlB,CAAb;AACA,UAAKC,SAAL,GAAiB,MAAKD,YAAL,CAAkB,KAAlB,CAAjB;AACA,UAAKE,SAAL,GAAiB,MAAKF,YAAL,CAAkB,MAAlB,CAAjB;AAEA,UAAKG,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,+BAAjB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,+BAApB;AAEAE,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,MAAKF,YAAvC;AAbU;AAcb;;;;;+EAED;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACUG,gBAAAA,SADV,GACsB,IAAIC,MAAM,CAACC,aAAP,CAAqBC,SAAzB,EADtB;AAEUC,gBAAAA,YAFV,GAEyB;AACjB,qCAAY,KAAKb,KAAjB,CADiB;AAEjB,4BAAU;AAFO,iBAFzB;AAMUc,gBAAAA,SANV,GAMsB;AACd,yBAAO;AAAA,2BAAM,IAAIJ,MAAM,CAACC,aAAP,CAAqBI,QAAzB,CAAkC,MAAI,CAACnB,UAAL,CAAgBoB,aAAhB,CAA8B,QAA9B,CAAlC,CAAN;AAAA,mBADO;AAEd,yBAAO;AAAA,2BAAM,IAAIN,MAAM,CAACC,aAAP,CAAqBM,QAAzB,CAAkC,MAAI,CAACrB,UAAL,CAAgBoB,aAAhB,CAA8B,QAA9B,CAAlC,CAAN;AAAA,mBAFO;AAGd,6BAAW;AAAA,2BAAM,IAAIN,MAAM,CAACC,aAAP,CAAqBI,QAAzB,CAAkC,MAAI,CAACnB,UAAL,CAAgBoB,aAAhB,CAA8B,QAA9B,CAAlC,CAAN;AAAA;AAHG,iBANtB;AAYIP,gBAAAA,SAAS,CAACS,SAAV,CAAoB,QAApB,EAA8B,SAA9B;AACAT,gBAAAA,SAAS,CAACS,SAAV,CAAoB,QAApB,EAA8B,aAA9B;AAbJ;AAAA;AAAA,uBAgBgC,kBAAI,KAAKhB,SAAT,CAhBhC;;AAAA;AAgBciB,gBAAAA,SAhBd;;AAkBQ,oBAAGA,SAAH,EAAc;AACJC,kBAAAA,KADI,sBACQ,IAAIC,GAAJ,CAAQF,SAAS,CAACG,GAAV,CAAe,UAAAC,IAAI;AAAA,2BAAI,CAACA,IAAI,CAAC,QAAD,CAAL,EAAiBA,IAAjB,CAAJ;AAAA,mBAAnB,CAAR,EAAwDC,MAAxD,EADR;AAEJC,kBAAAA,mBAFI,GAEkB,KAAKC,uBAAL,CAA6BP,SAA7B,EAAwC,QAAxC,CAFlB;AAIVC,kBAAAA,KAAK,CAACO,OAAN,CAAe,UAAAJ,IAAI;AAAA,2BAAId,SAAS,CAACmB,MAAV,CAAiB,CAACL,IAAI,CAACM,MAAL,CAAYC,QAAZ,EAAD,EAAyB,MAAI,CAACC,eAAL,CAAqBN,mBAArB,EAA0CF,IAAI,CAACM,MAA/C,CAAzB,CAAjB,CAAJ;AAAA,mBAAnB;AAEMG,kBAAAA,KANI,GAMI,CAAClB,SAAS,CAAC,KAAKX,SAAN,CAAT,IAA6BW,SAAS,CAAC,SAAD,CAAvC,GANJ;AAOVkB,kBAAAA,KAAK,CAACC,IAAN,CAAWxB,SAAX,EAAsBI,YAAtB;AACH;;AA1BT;AAAA;;AAAA;AAAA;AAAA;AA4BQqB,gBAAAA,OAAO,CAACC,GAAR;;AA5BR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;WAgCA,6BAAoB;AAChBzB,MAAAA,MAAM,CAAC0B,MAAP,CAAcC,IAAd,CAAmB,SAAnB,EAA8B;AAAE,oBAAY,CAAC,WAAD;AAAd,OAA9B;AACA3B,MAAAA,MAAM,CAAC0B,MAAP,CAAcE,iBAAd,CAAgC,KAAKlC,SAArC;AACH;;;WAED,iCAAwBmC,UAAxB,EAAoCC,GAApC,EAAyC;AACrC,UAAIC,gBAAgB,GAAG,EAAvB;AACA,UAAIC,cAAJ;AAEAH,MAAAA,UAAU,CAACZ,OAAX,CAAoB,UAAAJ,IAAI,EAAI;AACxBmB,QAAAA,cAAc,GAAGD,gBAAgB,CAACE,IAAjB,CAAsB,UAAAC,IAAI;AAAA,iBAAIA,IAAI,CAACJ,GAAD,CAAJ,IAAajB,IAAI,CAACiB,GAAD,CAArB;AAAA,SAA1B,CAAjB;;AAEA,YAAIE,cAAJ,EAAoB;AAChBA,UAAAA,cAAc,CAACG,UAAf;AACH,SAFD,MAEO;AAAA;;AACH,cAAIC,gBAAgB,+DACfN,GADe,EACTjB,IAAI,CAACiB,GAAD,CADK,sCAEf,YAFe,EAEA,CAFA,qBAApB;AAIAC,UAAAA,gBAAgB,gCAAOA,gBAAP,IAAyBK,gBAAzB,EAAhB;AACH;AACJ,OAZD;AAcA,aAAOL,gBAAP;AACH;;;WAED,yBAAgBA,gBAAhB,EAAkCZ,MAAlC,EAA0C;AACtC,aAAOY,gBAAgB,CAACE,IAAjB,CAAuB,UAAApB,IAAI;AAAA,eAAIA,IAAI,CAACM,MAAL,KAAgBA,MAApB;AAAA,OAA3B,EAAwDgB,UAA/D;AACH;;;WAED,wBAAe;AACX,UAAME,OAAO,GAAG;AACZ,iBAAS;AADG,OAAhB;AAIA,UAAM3D,IAAI,GAAG,IAAIsB,MAAM,CAACC,aAAP,CAAqBC,SAAzB,CAAmC,EAAnC,CAAb;AACA,WAAKR,SAAL,CAAehB,IAAf,EAAqB2D,OAArB;AACH;;;;iCAtFeC;;AAyFpBzC,MAAM,CAAC0C,cAAP,CAAsBC,MAAtB,CAA6B,cAA7B,EAA6CzD,KAA7C","file":"charts.56b0dd49.js","sourceRoot":"..\\src","sourcesContent":["export default async function api(url) {\r\n    if(url) {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n\r\n        return data;\r\n    }\r\n}","import api from '../api/api.js';\r\n\r\nconst template = document.createElement('template');\r\ntemplate.innerHTML =  \r\n`\r\n<style>\r\n    #chart {\r\n        max-width: 1500px\r\n    }\r\n</style>\r\n<div id=\"chart\"> </div>\r\n`\r\nclass Chart extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        \r\n        this.attachShadow({ mode: 'open' });\r\n        this.shadowRoot.appendChild(template.content.cloneNode(true));\r\n\r\n        this.title = this.getAttribute('title');\r\n        this.apiSource = this.getAttribute('api');\r\n        this.chartType = this.getAttribute('type');\r\n\r\n        this.drawChart = this.drawChart.bind(this);\r\n        this.chartResizer = this.chartResizer.bind(this);\r\n        \r\n        window.addEventListener('resize', this.chartResizer);\r\n    }\r\n\r\n    async drawChart() {\r\n        const dataTable = new google.visualization.DataTable();\r\n        const tableOptions = {\r\n            'title': `${this.title}`,\r\n            'height': 350\r\n        };\r\n        const chartsMap = {\r\n            'bar': () => new google.visualization.BarChart(this.shadowRoot.querySelector('#chart')),\r\n            'pie': () => new google.visualization.PieChart(this.shadowRoot.querySelector('#chart')),\r\n            'default': () => new google.visualization.BarChart(this.shadowRoot.querySelector('#chart'))\r\n        };\r\n\r\n        dataTable.addColumn('string', 'User Id');\r\n        dataTable.addColumn('number', 'Total Posts');\r\n\r\n        try {\r\n            const postsList = await api(this.apiSource);\r\n\r\n            if(postsList) {\r\n                const posts = [...new Map(postsList.map( post => [post['userId'], post])).values()];\r\n                const postsOccurrencesMap = this.counterPostsOccurrences(postsList, 'userId');\r\n            \r\n                posts.forEach( post => dataTable.addRow([post.userId.toString(), this.postOccurrences(postsOccurrencesMap, post.userId)]));\r\n                \r\n                const chart = (chartsMap[this.chartType] || chartsMap['default'])();\r\n                chart.draw(dataTable, tableOptions);\r\n            }\r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    connectedCallback() {\r\n        google.charts.load('current', { 'packages': ['corechart'] });\r\n        google.charts.setOnLoadCallback(this.drawChart);\r\n    }\r\n\r\n    counterPostsOccurrences(postsArray, key) {\r\n        let postsOccurrences = [];\r\n        let postOccurrence;\r\n    \r\n        postsArray.forEach( post => {\r\n            postOccurrence = postsOccurrences.find(item => item[key] == post[key]);\r\n            \r\n            if (postOccurrence) {\r\n                postOccurrence.occurrence++;\r\n            } else {\r\n                let newPostOcurrence = {\r\n                    [key]: post[key],\r\n                    ['occurrence']: 1\r\n                };\r\n                postsOccurrences = [...postsOccurrences, newPostOcurrence];\r\n            }\r\n        })\r\n        \r\n        return postsOccurrences;\r\n    }\r\n\r\n    postOccurrences(postsOccurrences, userId) {\r\n        return postsOccurrences.find( post => post.userId === userId ).occurrence;\r\n    }\r\n\r\n    chartResizer() {\r\n        const options = {\r\n            'width': '100%'\r\n        };\r\n    \r\n        const data = new google.visualization.DataTable([]);\r\n        this.drawChart(data, options);\r\n    };\r\n}\r\n\r\nwindow.customElements.define('custom-chart', Chart);"]}
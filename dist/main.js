(()=>{"use strict";const t=document.createElement("template");t.innerHTML='\n<style>\n    #chart {\n        max-width: 1500px\n    }\n</style>\n<div id="chart"> </div>\n';class e extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(t.content.cloneNode(!0)),this.title=this.getAttribute("title"),this.apiSource=this.getAttribute("api"),this.chartType=this.getAttribute("type"),this.drawChart=this.drawChart.bind(this),this.chartResizer=this.chartResizer.bind(this),window.addEventListener("resize",this.chartResizer)}async drawChart(){const t=new google.visualization.DataTable,e={title:`${this.title}`,height:350},a={bar:()=>new google.visualization.BarChart(this.shadowRoot.querySelector("#chart")),pie:()=>new google.visualization.PieChart(this.shadowRoot.querySelector("#chart")),default:()=>new google.visualization.BarChart(this.shadowRoot.querySelector("#chart"))};t.addColumn("string","User Id"),t.addColumn("number","Total Posts");try{const r=await async function(t){if(t){const e=await fetch(t);return await e.json()}}(this.apiSource);if(r){const s=[...new Map(r.map((t=>[t.userId,t]))).values()],i=this.counterPostsOccurrences(r,"userId");s.forEach((e=>t.addRow([e.userId.toString(),this.postOccurrences(i,e.userId)]))),(a[this.chartType]||a.default)().draw(t,e)}}catch(t){console.log(t)}}connectedCallback(){google.charts.load("current",{packages:["corechart"]}),google.charts.setOnLoadCallback(this.drawChart)}counterPostsOccurrences(t,e){let a,r=[];return t.forEach((t=>{if(a=r.find((a=>a[e]==t[e])),a)a.occurrence++;else{let a={[e]:t[e],occurrence:1};r=[...r,a]}})),r}postOccurrences(t,e){return t.find((t=>t.userId===e)).occurrence}chartResizer(){const t=new google.visualization.DataTable([]);this.drawChart(t,{width:"100%"})}}window.customElements.define("custom-chart",e)})();